{"version":3,"sources":["requests/main.js","components/ForecastCard.jsx","assets/videoBg.mp4","App.jsx","reportWebVitals.js","index.js"],"names":["unsecureApiKey","getForecastRequestZip","zipCode","a","fetch","response","json","ForecastCard","props","weather","className","Date","dt_txt","toLocaleString","alt","description","src","icon","main","temp","wind","speed","App","useState","forecast","setForecast","keyword","setKeyword","searchZip","res","cod","alert","id","videoBg","autoPlay","loop","muted","placeholder","onChange","e","target","value","onKeyDown","key","onClick","city","name","list","map","f","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAMA,G,MAAiB,oCAgBjBC,EAAqB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACLC,MAAM,wDAAD,OAC8BF,EAD9B,kBAC+CF,EAD/C,oBADA,cACtBK,EADsB,yBAKrBA,EAASC,QALY,2CAAH,sD,OCQZC,MAtBf,SAAsBC,GAEtB,IAAOC,EAAWD,EAAXC,QAEP,OAEI,sBAAKC,UAAU,gBAAf,UAEE,+BAAO,IAAIC,KAAKF,EAAQG,QAAQC,mBAChC,qBAAKC,IAAKL,EAAQA,QAAQ,GAAGM,YAAaC,IAAG,2CAAsCP,EAAQA,QAAQ,GAAGQ,KAAzD,UAC7C,+BAAOR,EAAQA,QAAQ,GAAGM,cAC1B,2DAA6B,uBAAML,UAAU,aAAhB,UAA8BD,EAAQS,KAAKC,KAA3C,cAC7B,gDACaV,EAAQW,KAAKC,MAD1B,cCdS,MAA0B,oCCuD1BC,MAjDf,WACE,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAS,uCAAG,4BAAAzB,EAAA,sEACAF,EAAsByB,GADtB,QACZG,EADY,QAERC,KAAO,MACbC,MAAM,iCAENN,EAAYI,GALE,2CAAH,qDAef,OACE,sBAAKnB,UAAU,MAAf,UACE,uBAAOsB,GAAIR,EAAW,iBAAmB,iBAAkBR,IAAKiB,EAASC,UAAQ,EAACC,MAAI,EAACC,OAAK,IAC5F,yBAAQ1B,UAAU,aAAlB,UACE,sBAAKsB,GAAG,SAAR,UACE,uBACEK,YAAa,kBACbC,SAAU,SAACC,GAAD,OAAOZ,EAAWY,EAAEC,OAAOC,QACrCC,UAdY,SAACH,GACP,UAAVA,EAAEI,KACJf,OAcI,wBAAQgB,QAAShB,EAAjB,wBAGAJ,GAAY,+BAAM,mBAAGQ,GAAG,WAAN,6GAEpB,oBAAItB,UAAU,YAAd,gBAA2Bc,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAUqB,KAAKC,UAE5C,qBAAKpC,UAAU,0BAAf,SACGc,GAAYA,EAASuB,KAAKC,KAAI,SAACC,EAAGC,GACjC,OAAIA,EAAI,EACC,cAAC,EAAD,CAAczC,QAASwC,EAAGJ,KAAMrB,EAASqB,OAE3C,cCnCFM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.369db2aa.chunk.js","sourcesContent":["const unsecureApiKey = \"4424f132028995c47bd7f67d8c5e44f9\";\nconst getWeatherRequest = async () => {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${\"Boulder\"}&appid=${unsecureApiKey}&units=imperial`\n  );\n\n  return response.json();\n};\nconst getWeatherRequestZip = async (zipCode) => {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?zip=${zipCode}&appid=${unsecureApiKey}&units=imperial`\n  );\n\n  return response.json();\n};\n\nconst getForecastRequestZip = async (zipCode) => {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/forecast?zip=${zipCode}&appid=${unsecureApiKey}&units=imperial`\n  );\n\n  return response.json();\n};\n\nexport { getWeatherRequest, getWeatherRequestZip, getForecastRequestZip };\n","import React from 'react';\n\nfunction ForecastCard(props) {\n\nconst {weather} = props;\n\nreturn (\n    \n    <div className='Forecast-card'>\n      \n      <span>{new Date(weather.dt_txt).toLocaleString()}</span>\n      <img alt={weather.weather[0].description} src={`https://openweathermap.org/img/w/${weather.weather[0].icon}.png`}/>\n      <span>{weather.weather[0].description}</span>\n      <span>Projected Temperature: <span className='Color-bold'>{weather.main.temp}Â° </span></span>\n      <span>\n      Wind Speed: {weather.wind.speed} mph\n      </span>\n\n     \n        \n    </div>\n  );\n}\n\nexport default ForecastCard;\n\n\n","export default __webpack_public_path__ + \"static/media/videoBg.64b7bee8.mp4\";","import './App.css';\nimport { getForecastRequestZip } from '../src/requests/main.js';\nimport { useState } from 'react';\nimport ForecastCard from './components/ForecastCard';\nimport videoBg from './assets/videoBg.mp4';\n\nfunction App() {\n  const [forecast, setForecast] = useState(null);\n  const [keyword, setKeyword] = useState('');\n\n  const searchZip = async () => {\n    var res = await getForecastRequestZip(keyword)\n    if (res.cod >= '400') {\n      alert(\"Please type a valid zip code.\")\n    } else {\n      setForecast(res)\n    }\n  }\n\n  const checkKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      searchZip();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <video id={forecast ? \"Forecast-video\" : \"Greeting-video\"} src={videoBg} autoPlay loop muted />\n      <header className=\"App-header\">\n        <div id=\"Search\">\n          <input\n            placeholder={\"search zip code\"}\n            onChange={(e) => setKeyword(e.target.value)}\n            onKeyDown={checkKeyPress}\n          />\n          <button onClick={searchZip}>Search</button>\n        </div>\n\n        {!forecast && <span><p id=\"Greeting\">Enter a zip code to receive a forecast detailing weather every 3 hours for the next 24 hours.</p></span>}\n\n        <h1 className=\"City-name\">{forecast?.city.name}</h1>\n      </header>\n      <div className=\"Forecast-card-container\">\n        {forecast && forecast.list.map((f, i) => {\n          if (i < 9) {\n            return <ForecastCard weather={f} city={forecast.city} />\n          }\n          return null;\n        })}\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}